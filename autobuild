#! /usr/bin/env bash
#
#   autobuild - Open Source (GPL) C/C++ Build System Environment
#   compilation
#
#   Copyright (c) 2022 Qurban Ullah <qurbanullah@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

# set umask
umask 0022

# exit when any command fails
# set -e

# change to english locale!
export LANG="en_US"

BASENAME="$(basename "${0}")"
PARAMETER=${1}
BUILD_DIRECTORY="build"
autobuild_DIRECTORY=${PWD}


# program version
LPSC_BUILD_VER=0.2.2
CMAKEVER=3.16

# initialize variables
BUILD=0
CLEAN=0
BUILD_FRESH=0
MUTATION_TESTING=0
BUILD_SHARED_LIBRARY=0
BUILD_STATIC_LIBRARY=0


####################################################################################################

# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW

if tput setaf 0 &>/dev/null; then
	ALL_OFF="$(tput sgr0)"
	BOLD="$(tput bold)"
	BLUE="${BOLD}$(tput setaf 4)"
	GREEN="${BOLD}$(tput setaf 2)"
	RED="${BOLD}$(tput setaf 1)"
	YELLOW="${BOLD}$(tput setaf 3)"
else
	ALL_OFF="\e[0m"
	BOLD="\e[1m"
	BLUE="${BOLD}\e[34m"
	GREEN="${BOLD}\e[32m"
	RED="${BOLD}\e[31m"
	YELLOW="${BOLD}\e[33m"
fi

readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

### SUBROUTINES ###
plain() {
	local mesg=$1; shift
	printf "${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

success() {
	local mesg=$1; shift
	printf "${GREEN} $(gettext "Success:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

message() {
	local mesg=$1; shift
	printf "${BLUE} $(gettext "Message:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
	local mesg=$1; shift
	printf "${YELLOW} $(gettext "Warning:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
	local mesg=$1; shift
	printf "${RED} $(gettext "Error:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################

# COMPILER MAKE FLAG
# MAKEFLAGS="-j$(/usr/bin/getconf _NPROCESSORS_ONLN)"
# MAKEFLAGS="-j$(grep --count processor /proc/cpuinfo)"
MAKEFLAGS=""
PARALLEL_FLAGS="-j$(nproc)"

# Compiler and Linker Flags
# -march (or -mcpu) builds exclusively for an architecture
# -mtune optimizes for an architecture, but builds for whole processor family
# defau;t to hardening
# Flags -fprofile-arcs -ftest-coverage are used for code coverage
CFLAGS="-march=x86-64 -mtune=generic -O2 -fomit-frame-pointer -pipe -Wall -fprofile-arcs -ftest-coverage"

CXXFLAGS="-march=x86-64 -mtune=generic -O2  -fomit-frame-pointer -pipe -Wall -fprofile-arcs -ftest-coverage"

CPPFLAGS="-D_FORTIFY_SOURCE=2"

LDFLAGS=""

####################################################################################################

show_usage() {
    cat <<EOF
Usage: $BASENAME [OPTIONS...] 

	-h                                                      Show Usage Information
	--help                                                  Show Full Help
	-a|--all                                                Build Project with all default options
	-b <option>|--build <otion>                             Build Project, valid otions are static | shared
	-c|--clean                                              Clean Project Directory
	-d <source directory>|--directory <source directory>    Source Directory
	-f|--fresh                                              Fresh build
	-m|--mutation-testing                                   Build and Test for mutation
	-t|--test-framework                                     Testing framework, valid otions are ctest | gtest


EOF
}
########################################################################
show_help() {
    cat <<EOF
Usage: $BASENAME [OPTIONS...]

autobuild an Open Source (GPL) C/C++ Build System Setup.

OPTIONS

	-h                                                      Show Usage Information
	--help                                                  Show Full Help
	-a|--all                                                Build Project with all default options
	-b <option>|--build <otion>                             Build Project, valid otions are static | shared
	-c|--clean                                              Clean Project Directory
	-d <source directory>|--directory <source directory>    Source Directory
	-f|--fresh                                              Fresh build
	-m|--mutation-testing                                   Build and Test for mutation
	-t|--test-framework                                     Testing framework, valid otions are ctest | gtest

SYNOPSIS


NOTE
	

EOF
}

# Purpose: Converts a string to lower case
# Arguments:
#   $1 -> String to convert to lower case
##################################################################
function to_lower() 
{
    local str="$@"
    local output     
    output=$(tr '[A-Z]' '[a-z]'<<<"${str}")
    echo $output
}
##################################################################
# Purpose: Display an error message and die
# Arguments:
#   $1 -> Message
#   $2 -> Exit status (optional)
##################################################################
function die() 
{
    local m="$1"	# message
    local e=${2-1}	# default exit status 1
    echo "$m" 
    exit $e
}

##################################################################
# Purpose: Return true if script is executed by the root user
# Arguments: none
# return : 0   - user logged in as root
#          1   - user not logged in as root
##################################################################
function is_root() 
{
   if test "x`id -u`" != "x0"; then
		return 1
	else
		return 0
	fi
}

##################################################################
# Purpose: Return true $user exits in /etc/passwd
# Arguments: $1 (username) -> Username to check in /etc/passwd
# Return: True or False
##################################################################
function is_user_exits() 
{
    local u="$1"
    grep -q "^${u}" $PASSWD_FILE && return $TRUE || return $FALSE
}

########################################################################
# function to exit script when command failed with spsific codes.
exit_on_error() {
    exit_code=$1
    last_command=${@:2}
    if [ $exit_code -ne 0 ]; then
        >&2 echo "\"${last_command}\" command failed with exit code ${exit_code}."
        exit $exit_code
    fi
}

########################################################################
# Checks to see if user has sudo privileges
#
#  usage : checkForSudoPrivilege
# return : 0   - user has sudo privileges and password is not required
#          1   - user has no sudo privileges
#          2   - user has sudo privileges but password is required
##
checkForSudoPrivilege () {
	local prompt
    prompt=$(sudo -nv 2>&1)

	if [ $? -eq 0 ]; then
		return 0
	elif echo $prompt | grep -q '^sudo:'; then
		return 0
	else
		return 1
	fi
}

########################################################################
# Purpose 	:	Check if duser has sudo privelage
#
# Arguments	:	arg1	:	Null
#				arg2	:	Null
#
# Return 	: 	nothing
#
# Usage 	: 	has_sudo 
#
########################################################################
has_sudo() {
    local prompt

    prompt=$(sudo -nv 2>&1)
    if [ $? -eq 0 ]; then
    	echo "has_sudo__pass_set"
    elif echo $prompt | grep -q '^sudo:'; then
    	echo "has_sudo__needs_pass"
    else
    	echo "no_sudo"
    fi
}

########################################################################
# Purpose 	:	Evaluate command as sudo user
#
# Arguments	:	arg1	:	<directory>
#				arg2	:	Null
#
# Return 	: 	0		:	true
#  				1		:	false
#
# Usage 	: 	elevate_cmd arg1
#
########################################################################
elevate_cmd () {
    local cmd=$@

    HAS_SUDO=$(has_sudo)

    case "$HAS_SUDO" in
    has_sudo__pass_set)
        sudo $cmd
        ;;
    has_sudo__needs_pass)
        echo "Please supply sudo password for the following command: sudo $cmd"
        sudo $cmd
        ;;
    *)
        echo "Please supply root password for the following command: su -c \"$cmd\""
        su -c "$cmd"
        ;;
    esac
}

# Checks weather given command or utility exists on system
#
# usage : command_exists <command>
# return : true if command exists

########################################################################
command_exists () {
    command -v "$1" >/dev/null 2>&1
}

########################################################################
# Checks weather system meets dependancies requirment
#
# usage : check_if_build_tools_available
# return : nothing
# exit	 : if dependenacies not found
##
check_if_build_tools_available () {
	local dependancies=(gcc make cmake sed grep gcov lcov)
	for dep in ${dependancies[@]}; do
		if ! command_exists "${dep}"; then        
        	message "Your system does not meet requirment : ${dep}"
        	exit 1
    	fi
	done
}

########################################################################
# Purpose 	:	Check that given function exist in the script
# Usage 	: 	function_exists <function_name>
# 				arg1	:	function name
# Return 	: 	0   - true
#          		1   - false
########################################################################
function_exists(){
	
    FUNCTION_NAME=${1}

    [ -z "$FUNCTION_NAME" ] && return 1

    declare -F "$FUNCTION_NAME" > /dev/null 2>&1

    return $?
}
########################################################################

##
#  usage : check_item_in_options_array( $needle, $haystack )
# return : 0   - enabled
#          1   - disabled
#          127 - not found
##
check_item_in_options_array() {	
	local needle=$1; shift
	local i opt
	for (( i = $#; i > 0; i-- )); do
		opt=${!i}
		if [[ $opt = "$needle" ]]; then
			# enabled
			#echo "enabled"
			return 0
		elif [[ $opt = "!$needle" ]]; then
			# disabled
			#echo "disabled"
			return 1
		fi
	done

	# not found
	return 127
}

########################################################################
# Checks to see if options are present in ee.conf or .avhb;
# .avhb options always take precedence.
#
#  usage : check_option( $option, $expected_val )
# return : 0   - matches expected
#          1   - does not match expected
#          127 - not found
##
check_option() {
	check_item_in_options_array "$1" ${options[@]}
	case $? in
		0) # assert enabled
			[[ $2 = y ]]
			return ;;
		1) # assert disabled
			[[ $2 = n ]]
			return ;;
	esac

	# fall back to makepkg.conf options
	check_item_in_options_array "$1" ${OPTIONS[@]}
	case $? in
		0) # assert enabled
			[[ $2 = y ]]
			return ;;
		1) # assert disabled
			[[ $2 = n ]]
			return ;;
	esac

	# not found
	return 127
}


##
# Check if option is present in BUILDENV
#
#  usage : check_buildenv( $option, $expected_val )
# return : 0   - matches expected
#          1   - does not match expected
#          127 - not found
##
check_buildenv() {
	check_item_in_options_array "$1" ${BUILDENV[@]}
	case $? in
		0) # assert enabled
			[[ $2 = "y" ]]
			return ;;
		1) # assert disabled
			[[ $2 = "n" ]]
			return ;;
	esac

	# not found
	return 127
}

##
#  usage : in_array( $needle, $haystack )
# return : 0 - found
#          1 - not found
##
check_item_in_array() {
	local needle=$1; shift
	local item
	for item in "$@"; do
		[[ $item = "$needle" ]] && return 0 # Found
	done
	return 1 # Not Found
}

########################################################################
# Purpose 	:	Check if directory exists
#
# Arguments	:	arg1	:	<directory>
#				arg2	:	Null
#
# Return 	: 	0		:	true
#  				1		:	false
#
# Usage 	: 	check_if_directory_exist arg1
#
########################################################################
check_if_directory_exist() {
	if [[ -d ${1} ]]; then
     	return 0		
	else
		return 1
	fi
}

########################################################################
# Purpose 	:	Check if directory exists
#
# Arguments	:	arg1 	: path to directory
#
# Return 	: 	0 - directory not empty
#			: 	1 - directory is empty
#			: 	127 - directory not found
#
# Usage 	: 	if_directory_is_empty arg1
#
########################################################################
if_directory_is_empty() {
	if [ -d ${1} ]; then
		# message "$(gettext "Directory is : ${1}")"
		if [ -z "$(ls -A ${1})" ]; then
     		return 0
		else
			return 1
		fi
	else
		return 127
	fi
}

########################################################################
# Purpose 	:	Get File content
#
# Arguments	:	arg1 	: 	file name
#
# Return 	: 	nothing
#
# Usage 	: 	get_file_contents arg1
#
########################################################################
get_file_contents() {	
    echo "$(cat ${1})" 
}

########################################################################
# Purpose 	:	Check for default linker of the system
#
# Arguments	:	arg1 	: 	Linker name
#
# Return 	: 	0 - directory not empty
#			: 	1 - directory is empty
#			: 	127 - directory not found
#
# Usage 	: 	check_for_default_linker arg1
#
########################################################################
check_for_default_linker(){
	if [ -n ${1} ]; then
		if [[ -n "$(/usr/bin/ld --version | grep "${1}")" ]]; then
     		return 0
		else
			return 1
		fi
	else
		return 127
	fi
}

########################################################################
# Purpose 	:	Generate CMakeLists.txt file for configuring the project
# 
# Arguments	:	arg1	:	Null
# 				arg2	:	Null
#				
# Return 	: 	Nothing
#
#Usage 	: 	writeCMakeListsFiles
#
########################################################################
bootstrap_project_cmake() {
	local baseCmakeFile=(
		"cmake_minimum_required(VERSION ${CMAKEVER})"
		"project(autobuild VERSION 0.1.0)"
		"# Enable testing"
		"include(CTest)"
		"enable_testing()"
		"add_subdirectory(src)"
		"add_subdirectory(test)"
	)

	printf '%s\n' "${baseCmakeFile[@]}" >> CMakeLists.txt

	for srcsubdir in ${src_sub_dir[@]}; do
		# write CMakeLists.txt file
		echo "# Add sub directories" >> src/CMakeLists.txt
		# echo "include_directories("'${CMAKE_SOURCE_DIR}'/include")"  >> src/${srcsubdir}/CMakeLists.txt
		echo "add_subdirectory($srcsubdir)" >> src/CMakeLists.txt

		if [[ -f "src/${srcsubdir}.c" ]]; then
			echo "add_executable(${srcsubdir}_program ${srcsubdir}.c)" >> src/CMakeLists.txt
			echo "target_link_libraries(${srcsubdir}_program PRIVATE lib${srcsubdir})" >> src/CMakeLists.txt

		elif [[ -f "src/${srcsubdir}.cc"  ]]; then
			echo "add_executable(${srcsubdir}_program ${srcsubdir}.cc)" >> src/CMakeLists.txt
			echo "target_link_libraries(${srcsubdir}_program PRIVATE lib${srcsubdir})" >> src/CMakeLists.txt

		elif [[ -f "src/${srcsubdir}.cpp"  ]]; then
			echo "add_executable(${srcsubdir}_program ${srcsubdir}.cpp)" >> src/CMakeLists.txt
			echo "target_link_libraries(${srcsubdir}_program PRIVATE lib${srcsubdir})" >> src/CMakeLists.txt

		else
			warning "${srcsubdir}.c or ${srcsubdir}.cc or ${srcsubdir}.cpp file not found, executable will not be generated"			
		fi

			echo "include_directories("'${CMAKE_SOURCE_DIR}'/include")"  >> src/CMakeLists.txt			
			touch src/CMakeLists.txt

		# CMakeFile for lib sub directories
		# find all files with extension .c .cc . cpp in lib sub directories
		local src_sub_dir_files=$(find src/${srcsubdir} -name '*.c' -o -name '*.cpp' -o -name '*.cc' | sed "s|src/${srcsubdir}/||g" | sed "s|src/main.c||g")
		# echo ${src_sub_dir_files[@]}
		
		echo "add_library(lib${srcsubdir} ${src_sub_dir_files[@]})" >> src/${srcsubdir}/CMakeLists.txt
		echo "target_include_directories(lib${srcsubdir} PUBLIC "'${CMAKE_SOURCE_DIR}'/include")" >> src/${srcsubdir}/CMakeLists.txt
	done

	# CMakeFile for test directory
	# find sub directories in src directory
	# local test_sub_dir=$(find test/ -maxdepth 1 -type d | sed 's|test/||g')
	# echo ${test_sub_dir[@]}
	echo "# Add sub directories" >> test/CMakeLists.txt
	# echo "include_directories("'${CMAKE_SOURCE_DIR}'/include")"  >> test/CMakeLists.txt

	for testsubdir in ${test_sub_dir[@]}; do
		touch test/CMakeLists.txt

		if [[ ${TEST_FRAMEWORK} == "gtest" ]]; then
			echo "include(GoogleTest)" >> test/CMakeLists.txt
		fi
		# echo "include_directories("'${CMAKE_SOURCE_DIR}'/include")"  >> test/${testsubdir}/CMakeLists.txt

		# CMakeFile for lib sub directories
		# find all files with extension .c .cc . cpp in lib sub directories
		local test_sub_dir_files=$(find test/$testsubdir/ -name '*.c' -o -name '*.cpp' -o -name '*.cc' | sed "s|test/||g")
		
		
		for testsubdirfile in ${test_sub_dir_files[@]}; do

			local execuable=$(echo ${testsubdirfile%.*} | sed "s|${testsubdir}/||g")

			# write CMakeLists.txt file
			if [[ ${TEST_FRAMEWORK} == "ctest" ]]; then
				echo "add_executable(${execuable} $testsubdirfile)" >> test/CMakeLists.txt				
				echo "target_link_libraries(${execuable} PRIVATE lib${testsubdir})" >> test/CMakeLists.txt
				echo "add_test(NAME ${execuable} COMMAND ${execuable})" >> test/CMakeLists.txt

			elif [[ ${TEST_FRAMEWORK} == "gtest" ]]; then
				echo "add_executable(${execuable} $testsubdirfile)" >> test/CMakeLists.txt				
				echo "target_link_libraries(${execuable} PRIVATE  lib${testsubdir} gtest)" >> test/CMakeLists.txt
				echo "gtest_discover_tests(${execuable})" >> test/CMakeLists.txt

			else
				echo "add_executable(${execuable} $testsubdirfile)" >> test/CMakeLists.txt
				echo "target_link_libraries(${execuable} PRIVATE lib${testsubdir})" >> test/CMakeLists.txt
				echo "add_test(NAME ${execuable} COMMAND ${execuable})" >> test/CMakeLists.txt
			fi		
		done
	done
}

########################################################################
# Purpose 	:	Clean Project directory
# Usage 	: 	clean_project
# 				arg1	:	Null
#				arg2	:	Null
# return 	: 	Nothing
########################################################################
clean_project() {
	if [[ -d ${BUILD_DIRECTORY} ]]; then
		rm -rf ${BUILD_DIRECTORY} 
	fi
	find . -name "CMakeLists.txt" -exec rm -rf {} \;
	if [[ -d ${SOURCE_DIRECTORY}_mutated ]]; then
		rm -rf ${SOURCE_DIRECTORY}_mutated
	fi
}

########################################################################
# Purpose 	:	Configure project with CMake
# Usage 	: 	configure_project
# 				arg1	:	Null
#				arg2	:	Null
# return 	: 	Nothing
########################################################################
configure_project() {
	export CC=${CC}
	export CFLAGS=${CFLAGS}
	export CXXFLAGS=${CXXFLAGS}
	export LDFLAGS=${LDFLAGS}

	# echo ${CC}
	# echo ${CFLAGS}
	# echo ${CXXFLAGS}
	# echo ${LDFLAGS}

	# exit 1
	if [[ ${BUILD_SHARED_LIBRARY} == 1 ]]; then
		cmake -S . -B ${BUILD_DIRECTORY} -DBUILD_SHARED_LIBS=ON
	else
		cmake -S . -B ${BUILD_DIRECTORY}
	fi
}

########################################################################
# Purpose 	:	Compile project 
# Usage 	: 	configure_project
# 				arg1	:	Null
#				arg2	:	Null
# return 	: 	Nothing
########################################################################
compile_project() {
	cmake --build ${BUILD_DIRECTORY} --parallel ${PARALLEL_FLAGS}
	# cmake --build ${BUILD_DIRECTORY}
}

########################################################################
# Purpose 	:	Run Test Suites 
# Usage 	: 	test_project
# 				arg1	:	Null
#				arg2	:	Null
# return 	: 	Nothing
########################################################################
test_project() {
	ctest --parallel ${PARALLEL_FLAGS}
}

########################################################################
# Purpose 	:	Build Code Coverage Report
# Usage 	: 	code_coverage_report arg1 arg2
# 				arg1	:	directory which have the *.gcda data file (object direcory)
#				arg2	:	output directory
# Return 	: 	Nothing
########################################################################
code_coverage_report() {
	# 1. Generate the coverage.info data file
	lcov \
		--capture \
		--directory ${1} \
		--output-file ${1}/coverage.info \
		>/dev/null 2>&1

	# 2. Generate a report from this data file
	genhtml ${1}/coverage.info \
		--output-directory "${COVERAGE_TEST_REPORT_DIRECTORY}/${2}" \
		>/dev/null 2>&1
}

########################################################################
# Purpose 	:	Build Code Coverage Report
# Usage 	: 	code_coverage_report
# 				arg1	:	Null
#				arg2	:	Null
# Return 	: 	Nothing
########################################################################
coverage_test_suite_reports() {
	message "Generating Code coverage report"

	local build_test_sub_dir=$(find test/CMakeFiles/ -maxdepth 1 -type d  | sed "s|test/CMakeFiles/||g")
	# echo ${build_test_sub_dir[@]}
	# exit 1
	for buildtestsubdir in ${build_test_sub_dir[@]}; do
		for testsubdir in ${test_sub_dir[@]}; do
			code_coverage_report "test/CMakeFiles/${buildtestsubdir}/${testsubdir}" "${buildtestsubdir}"
		done
	done
	if [[ -f "${COVERAGE_TEST_REPORT_DIRECTORY}/$testsubdir/index.html" ]]; then
		success "Code coverage report generated successfully"	
		# message "Code coverage report is generated in "${COVERAGE_TEST_REPORT_DIRECTORY}""
	fi
}

########################################################################
# Purpose 	:	Build Mutated Project 
# Usage 	: 	build_project
# 				arg1	:	Null
#				arg2	:	Null
# return 	: 	Nothing
########################################################################
build_mutated_project(){

		local retval=0
		local mutation_test_log_filename=${2}

		BUILD_DIRECTORY=${1}
		echo  ${BUILD_DIRECTORY}

		if [[ -d ${BUILD_DIRECTORY} ]]; then
			rm -rf ${BUILD_DIRECTORY}
		fi

		# configure project
		if [[ ! -d ${BUILD_DIRECTORY} ]]; then
			mkdir ${BUILD_DIRECTORY}
		fi

		if command_exists "ld.lld"; then
			CFLAGS+=" -fuse-ld=lld"
			LDFLAGS+=" -Wl,-fuse-ld=lld"
		elif command_exists "ld.gold"; then
			CFLAGS+=" -flto -fomit-frame-pointer -pipe -fuse-ld=gold"
			LDFLAGS+=" -Wl,-fuse-ld=gold"
		elif command_exists "ld.bfd"; then
			CFLAGS+=" -flto -fomit-frame-pointer -pipe -fuse-ld=bfd"
			LDFLAGS+=" -Wl,-fuse-ld=bfd"
		else
			CFLAGS+=" -flto -fomit-frame-pointer -pipe"
			LDFLAGS+=" -Wl"
		fi

		configure_project || retval=$?
	
		if [[ $retval == 0 ]]; then
			message "$(gettext "Project configured successfully")"
			unset $retval
		fi
		
		# message "Compiling" || retval=$?
		compile_project || retval=$?
		
		if [[ $retval == 0 ]]; then
			message "$(gettext "Project compiled successfully")"
			unset $retval
		fi

		pushd ${BUILD_DIRECTORY} >/dev/null 2>&1
			# message "Testing"
			if [[ -f "${MUTATION_TEST_REPORT_DIRECTORY}/$mutation_test_log_filename.log" ]]; then
				rm "${MUTATION_TEST_REPORT_DIRECTORY}/$mutation_test_log_filename.log"
			fi
			touch "${MUTATION_TEST_REPORT_DIRECTORY}/$mutation_test_log_filename.log"

			# echo "current build test directory is: ${PWD}"
			test_project 2>&1 | tee -a "${MUTATION_TEST_REPORT_DIRECTORY}/$mutation_test_log_filename.log"
			if [[ $retval == 0 ]]; then
				message "$(gettext "Unit Test Completed")"
				unset $retval
			fi
		popd >/dev/null 2>&1
		unset ${BUILD_DIRECTORY}
}


########################################################################
# Purpose 	:	Build Mutated Project 
# Usage 	: 	build_project
# 				arg1	:	Null
#				arg2	:	Null
# return 	: 	Nothing
########################################################################
mutate_source_code(){
	# cd ${SOURCE_DIRECTORY}_mutated
	# check that we are in SOURCE_DIRECTORY
	local current_dir=${PWD}
	local source_dir_mutated=${SOURCE_DIRECTORY}
	CURENT_MUTATION_ROOT_DIRECTORY=""

	local sub_directories=$(find "${SOURCE_DIRECTORY}/mutate/" -mindepth 1 -maxdepth 1 -type d | sed "s|mutate/||g")
	local mutate_sub_directories="${sub_directories##*/}"
	# echo "Directories are: ${mutate_sub_directories[@]}"
	
	for mutate_sub_directory in ${mutate_sub_directories[@]}
	do
		local tsv_files=$(find "${SOURCE_DIRECTORY}/mutate/${mutate_sub_directory}/" -name '*.csv')

		for tsv_file in ${tsv_files[@]}
		do
			# ((i+=1))
			local filename="${tsv_file##*/}"
			local tsvdirectory=${filename%.*}
			# echo "mutate file is : $tsvdirectory"
			# [[ -d ../mutation_testing/mutation_${tsvdirectory} ]] && 	rm -rf ../mutation_testing/mutation_${tsvdirectory}
			[[ ! -d ../mutation_testing/mutation_${tsvdirectory} ]] && 	mkdir -p ../mutation_testing/mutation_${tsvdirectory}
			
			pushd ../mutation_testing/mutation_${tsvdirectory}  >/dev/null 2>&1
				CURENT_MUTATION_ROOT_DIRECTORY=${PWD}
			
				while IFS=$',' read -r -a myArray
					do
					local array="${#myArray[*]}"
					local muteable=$((array - 2))
					for (( c=0; c<${muteable}; c++ )) 
						do

						cp -af ${SOURCE_DIRECTORY} "${CURENT_MUTATION_ROOT_DIRECTORY}/mutated_${c}"
						CURENT_MUTATION_DIRECTORY="${CURENT_MUTATION_ROOT_DIRECTORY}/mutated_${c}"
						# exit 1;

						pushd ${CURENT_MUTATION_DIRECTORY}  >/dev/null 2>&1
							# echo ${PWD}
							# First array elemt or column must be the filename e.g src/oerator/Addition.c
							local mutable_file="${myArray[0]}"

							# second array element or column must be the reference string from the file
							local referance_string="${myArray[1]}"
							# echo "reference string is: $referance_string"

							# third, forth and fifth array element of coulmn are the mutable strings
							local arry_position=$((c + 2))
							local string_to_be_replaced="${myArray[$arry_position]}"
							# echo "string to be replaced is: $string_to_be_replaced"

							# actual mutation starts here
							# replace the reference string with the mutated string
							# to test weather the test succeded in finding the error in source code
							sed -i "s|${referance_string}|$string_to_be_replaced|g" ${mutable_file}

							build_mutated_project "${CURENT_MUTATION_DIRECTORY}/build" "${tsvdirectory}_mutated_${c}"
						popd >/dev/null 2>&1
						
						unset ${mutable_file}
						unset ${referance_string}
						unset ${arry_position}
						unset ${string_to_be_replaced}
						# exit 1
					done

				done < ${tsv_file}
			
			popd >/dev/null 2>&1
		done
	done
	rm -rf "../mutation_testing"
}

########################################################################
# Purpose 	:	Build Project 
# Usage 	: 	build_project
# 				arg1	:	Null
#				arg2	:	Null
# return 	: 	Nothing
########################################################################
build_project(){

	# check that we are in SOURCE_DIRECTORY
	local current_dir=${PWD}
	local source_dir=${SOURCE_DIRECTORY}

	if [[ ${current_dir} == ${source_dir} ]];then
	
		local retval=0

		# configure project
		if [[ ! -d ${BUILD_DIRECTORY} ]]; then
			mkdir ${BUILD_DIRECTORY}
		fi

		if command_exists "ld.lld"; then
			CFLAGS+=" -fuse-ld=lld"
			LDFLAGS+=" -Wl,-fuse-ld=lld"
		elif command_exists "ld.gold"; then
			CFLAGS+=" -flto -fomit-frame-pointer -pipe -fuse-ld=gold"
			LDFLAGS+=" -Wl,-fuse-ld=gold"
		elif command_exists "ld.bfd"; then
			CFLAGS+=" -flto -fomit-frame-pointer -pipe -fuse-ld=bfd"
			LDFLAGS+=" -Wl,-fuse-ld=bfd"
		else
			CFLAGS+=" -flto -fomit-frame-pointer -pipe"
			LDFLAGS+=" -Wl"
		fi

		if [[ -f "${SOURCE_DIRECTORY}/CMakeLists.txt" ]] && [[ ${BUILD_FRESH} == 0 ]]; then
			warning "System has alredy bootstrap the CMakLists files. For clean build run with -f or --build=fresh option"
			configure_project || retval=$?
		
			if [[ $retval == 0 ]]; then
				message "$(gettext "Project configured successfully")"
				unset $retval
			fi
		elif [[ ${BUILD_FRESH} == 1 ]]; then
			clean_project
			# Write cmake files
			bootstrap_project_cmake
			configure_project || retval=$?
		
			if [[ $retval == 0 ]]; then
				message "$(gettext "Project configured successfully")"
				unset $retval
			fi
		else
			# Write cmake files
			bootstrap_project_cmake
			configure_project || retval=$?
		
			if [[ $retval == 0 ]]; then
				message "$(gettext "Project configured successfully")"
				unset $retval
			fi
		fi
		
		# message "Compiling" || retval=$?
		compile_project || retval=$?
		
		if [[ $retval == 0 ]]; then
			message "$(gettext "Project compiled successfully")"
			unset $retval
		fi

		# remove directory first, no report from previous build
		if [[ ! -d ${COVERAGE_TEST_REPORT_DIRECTORY} ]]; then
			rm -rf ${COVERAGE_TEST_REPORT_DIRECTORY}
		fi
		if [[ ! -d ${MUTATION_TEST_REPORT_DIRECTORY} ]]; then
			rm -rf ${MUTATION_TEST_REPORT_DIRECTORY}
		fi
		if [[ ! -d ${UNIT_TEST_REPORT_DIRECTORY} ]]; then
			rm -rf ${UNIT_TEST_REPORT_DIRECTORY}
		fi

		pushd ${BUILD_DIRECTORY} >/dev/null 2>&1
			if [[ ! -d ${COVERAGE_TEST_REPORT_DIRECTORY} ]]; then
				mkdir -p ${COVERAGE_TEST_REPORT_DIRECTORY}
			fi
			if [[ ! -d ${MUTATION_TEST_REPORT_DIRECTORY} ]]; then
				mkdir -p ${MUTATION_TEST_REPORT_DIRECTORY}
			fi
			if [[ ! -d ${UNIT_TEST_REPORT_DIRECTORY} ]]; then
				mkdir -p ${UNIT_TEST_REPORT_DIRECTORY}
			fi

			# message "Testing"
			if [[ -f "${UNIT_TEST_REPORT_DIRECTORY}/Unit_Test_Report.log" ]]; then
				rm "${UNIT_TEST_REPORT_DIRECTORY}/Unit_Test_Report.log"
			fi
			touch "${UNIT_TEST_REPORT_DIRECTORY}/Unit_Test_Report.log"
			# ctest ${PARALLEL_FLAGS} 2>&1 | tee -a "../test_suite.log";
			test_project 2>&1 | tee -a "${UNIT_TEST_REPORT_DIRECTORY}/Unit_Test_Report.log" || retval=$?
			if [[ $retval == 0 ]]; then
				message "$(gettext "Unit Test Completed")"
				unset $retval
			fi

			coverage_test_suite_reports
		popd >/dev/null 2>&1
		if [[ ${MUTATION_TESTING} == 1 ]]; then
			mutate_source_code
		fi

		# back to the autobuild directory
		cd ${autobuild_DIRECTORY}
		message "Code coverage report is generated in "${COVERAGE_TEST_REPORT_DIRECTORY}""
		message "Mutation test report is generated in "${MUTATION_TEST_REPORT_DIRECTORY}""
		message "Unit Test report is generated in "${UNIT_TEST_REPORT_DIRECTORY}""
	else
		error "Current directory in not source directory"
		exit 1
	fi
}

########################################################################
# Purpose 	:	Main function
# Usage 	: 	main
# 				arg1	:	Parameters
#				arg2	:	Source Directory
# Return 	: 	Nothing
########################################################################
main() {
	ARGUMENT_LIST=(
	"build"
	"clean"
	"directory"
	"test-framework"
	)

	# Call getopt to validate the provided input. 
	options=$(getopt \
			--longoptions help,fresh,mutation-testing,"$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
			--name "$(basename "$0")" \
			--options "ab:cd:fhmt:" \
			-- "$@"
			)
	eval set -- "$options"

	while [[ $# -gt 0 ]]; do
		case "${1}" in

			-a|--all)
				BUILD=1
				BUILD_SHARED_LIBRARY=1
				CLEAN=1
				BUILD_FRESH=1
				MUTATION_TESTING=1
				TEST_FRAMEWORK="gtest"				
				;;		
			-b|--build)
				shift; # The arg is next in position args
				BUILD_OPTION=${1}
				BUILD=1
				[[ ! ${BUILD_OPTION} =~ shared|static ]] && {
					echo "Incorrect options provided"
					exit 1
				}
				[[ ${BUILD_OPTION} == "static" ]] && BUILD_STATIC_LIBRARY=1
				[[ ${BUILD_OPTION} == "shared" ]] && BUILD_SHARED_LIBRARY=1
				;;
			-c|--clean)
				CLEAN=1
				;;
			-d|--directory)
				shift; # The arg is next in position args
				DIRECTORY=${1}
				[[ ! -d ${DIRECTORY} ]] && {
					echo "Source directory not provided"
					exit 1
				}
				SOURCE_DIRECTORY=${DIRECTORY}				
				;;
			-f|--fresh)
				BUILD_FRESH=1
				;;
			
			-h)
				show_usage
				exit 1
				;;
			--help) 
				shift; # The arg is next in position args
				show_help
				exit 1
				;;
			-m|--mutation-testing)
				MUTATION_TESTING=1
				;;
			-t|--test-framework)
				shift; # The arg is next in position args
				TEST_FRAMEWORK=${1}
				[[ ! ${TEST_FRAMEWORK} =~ ctest|gtest ]] && {
					echo "Incorrect test framework provided. Options are ctest and gtest."
					exit 1
				}
				;;
			--) shift ; break ;;
			*) echo "Internal error!" ; exit 1 ;;
		esac
		shift
	done
	
	[[ ! ${SOURCE_DIRECTORY} ]] && SOURCE_DIRECTORY=${PWD}

	COVERAGE_TEST_REPORT_DIRECTORY="${SOURCE_DIRECTORY}/${BUILD_DIRECTORY}/Reports/Coverage_Test_Report"
	MUTATION_TEST_REPORT_DIRECTORY="${SOURCE_DIRECTORY}/${BUILD_DIRECTORY}/Reports/Mutation_Test_Report"
	UNIT_TEST_REPORT_DIRECTORY="${SOURCE_DIRECTORY}/${BUILD_DIRECTORY}/Reports/Unit_Test_Report"

	cd ${SOURCE_DIRECTORY}
	# lib_sub_dir=$(find lib/ -maxdepth 1 -type d | sed 's|lib/||g')
	src_sub_dir=$(find src/ -maxdepth 1 -type d | sed 's|src/||g')
	test_sub_dir=$(find test/ -maxdepth 1 -type d | sed 's|test/||g')

	if [[ -z ${src_sub_dir} ]]; then
		error "Source directory is not properly formated"
		exit 1
	fi
	# if [[ -z ${lib_sub_dir} ]]; then
	# 	error "Source directory is not properly formated"
	# 	exit 1
	# fi
	if [[ -z ${test_sub_dir} ]]; then
		error "Source directory is not properly formated"
		exit 1
	fi

	if [[ ${BUILD_STATIC_LIBRARY} == 1 ]]; then
		BUILD_SHARED_LIBRARY=0
	else
		BUILD_SHARED_LIBRARY=1
	fi

	if [[ ${BUILD} == 1 ]];then
		checkIfBuildToolsExists
		build_project		
	else
		error "Build option not provided"
		exit 1
	fi
}

main "$@"